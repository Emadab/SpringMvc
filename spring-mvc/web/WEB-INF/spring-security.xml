<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
       xmlns:sec="http://www.springframework.org/schema/security"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/security/oauth2
		http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security-4.2.xsd">

    <!-- @author Nagesh.Chauhan(neel4soft@gmail.com) -->
    <!-- This is default url to get a token from OAuth -->
    <sec:http pattern="/oauth/token" create-session="stateless"
              authentication-manager-ref="managerOauthMe"
    >
        <sec:csrf disabled="true"/>
        <sec:intercept-url pattern="/oauth/token" access="isFullyAuthenticated()"/>
        <sec:anonymous enabled="false"/>
        <sec:http-basic entry-point-ref="clientAuthenticationEntryPoint"/>
        <sec:custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER"/>
        <sec:access-denied-handler ref="oAuth2AccessDeniedHandler"/>
    </sec:http>

    <bean id="clientAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="test/client" />
        <property name="typeName" value="Basic" />
    </bean>
    <bean id="clientCredentialsTokenEndpointFilter" class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <property name="authenticationManager" ref="clientAuthenticationManager" />
    </bean>

    <sec:authentication-manager id="clientAuthenticationManager">
        <sec:authentication-provider user-service-ref="clientDetailsUserDetailsService"/>
    </sec:authentication-manager>


    <bean id="clientDetailsUserDetailsService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <constructor-arg index="0" ref="jdbcClientDetailsService"/>
    </bean>

    <bean id="jdbcClientDetailsService" class="org.springframework.security.oauth2.provider.client.JdbcClientDetailsService">
        <constructor-arg index="0" ref="dataSource"/>
    </bean>


    <bean id="oAuth2AccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler">

    </bean>

    <sec:authentication-manager
            id="managerOauthMe"
            alias="authenticationManager"
            xmlns="http://www.springframework.org/schema/security">
        <sec:authentication-provider user-service-ref="oauth2UserDetailsService"/>
    </sec:authentication-manager>

    <bean id="oauth2UserDetailsService" class="com.example.demo.Util.Oauth2UserDetailsService">
        <constructor-arg index="0" ref="dataSource"/>
    </bean>

    <sec:http create-session="never"
              access-decision-manager-ref="accessDecisionManager"
              entry-point-ref="oauthAuthenticationEntryPoint"
              use-expressions="true"
              auto-config="true"
    >
        <sec:csrf disabled="true"/>
        <sec:anonymous enabled="true"/>
        <sec:intercept-url pattern="/**"  method="OPTIONS" access="isAnonymous()"/>
        <sec:intercept-url pattern="/student/**" access="hasAnyRole('ROLE_APP','ROLE_ADMIN', 'ROLE_STUDENT')"/>
        <sec:intercept-url pattern="/school/**" access="hasAnyRole('ROLE_APP','ROLE_ADMIN', 'ROLE_SCHOOL')"/>
        <sec:intercept-url pattern="/admin/**" access="hasAnyRole('ROLE_APP','ROLE_ADMIN')"/>
        <sec:intercept-url pattern="/login/**" access="permitAll()"/>
        <sec:intercept-url pattern="/signup/**" access="permitAll()"/>
        <sec:custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER"/>
        <sec:access-denied-handler ref="oAuth2AccessDeniedHandler"/>
    </sec:http>

    <bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="test" />
    </bean>
    <bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
        <!--class="org.springframework.security.access.vote.UnanimousBased">-->
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
                <bean class="org.springframework.security.access.vote.RoleVoter" />
                <bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
                <bean class="org.springframework.security.web.access.expression.WebExpressionVoter" />
            </list>
        </constructor-arg>
    </bean>

    <!-- This defined token store, we have used inmemory tokenstore for now
        but this can be changed to a user defined one -->
    <bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore">
        <constructor-arg ref="dataSource"/>
        <property name="authenticationKeyGenerator">
            <bean class="com.example.demo.Util.UniqueAuthenticationKeyGenerator"/>
        </property>
    </bean>

    <!-- This is where we defined token based configurations, token validity
        and other things -->
    <bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <property name="tokenStore" ref="tokenStore" />
        <property name="supportRefreshToken" value="true" />
        <property name="accessTokenValiditySeconds" value="2592000" />
        <property name="reuseRefreshToken" value="false"/>
        <property name="clientDetailsService" ref="jdbcClientDetailsService" />
    </bean>

    <oauth:resource-server id="resourceServerFilter" resource-id="test" token-services-ref="tokenServices"/>

    <bean id="userApprovalHandler" class="org.springframework.security.oauth2.provider.approval.TokenStoreUserApprovalHandler">
        <property name="requestFactory" ref="defaultOAuth2RequestFactory"/>
        <property name="tokenStore" ref="tokenStore"/>
    </bean>

    <bean id="defaultOAuth2RequestFactory" class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
        <constructor-arg index="0" ref="jdbcClientDetailsService"/>
        <property name="checkUserScopes" value="false"/>
    </bean>


    <oauth:authorization-server
            client-details-service-ref="jdbcClientDetailsService" token-services-ref="tokenServices"
            user-approval-handler-ref="userApprovalHandler">
        <oauth:authorization-code />
        <oauth:implicit />
        <oauth:refresh-token />
        <oauth:client-credentials />
        <oauth:password />
    </oauth:authorization-server>

    <sec:global-method-security
            pre-post-annotations="enabled" proxy-target-class="true">
        <!--you could also wire in the expression handler up at the layer of the
            http filters. See https://jira.springsource.org/browse/SEC-1452 -->
        <sec:expression-handler ref="oauthExpressionHandler" />
    </sec:global-method-security>

    <oauth:expression-handler id="oauthExpressionHandler" />

    <oauth:web-expression-handler id="oauthWebExpressionHandler" />

</beans>